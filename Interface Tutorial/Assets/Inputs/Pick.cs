//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Inputs/Pick.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Pick : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Pick()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Pick"",
    ""maps"": [
        {
            ""name"": ""Pickable"",
            ""id"": ""8590a226-6879-4d1a-a534-31d095a9bd1c"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""9435e798-b145-4f2e-980e-3caeb4bf589f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""55f6985f-ce9e-4536-912c-51abe7f4a8cb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pickable
        m_Pickable = asset.FindActionMap("Pickable", throwIfNotFound: true);
        m_Pickable_LeftClick = m_Pickable.FindAction("LeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pickable
    private readonly InputActionMap m_Pickable;
    private IPickableActions m_PickableActionsCallbackInterface;
    private readonly InputAction m_Pickable_LeftClick;
    public struct PickableActions
    {
        private @Pick m_Wrapper;
        public PickableActions(@Pick wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_Pickable_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_Pickable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PickableActions set) { return set.Get(); }
        public void SetCallbacks(IPickableActions instance)
        {
            if (m_Wrapper.m_PickableActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_PickableActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_PickableActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_PickableActionsCallbackInterface.OnLeftClick;
            }
            m_Wrapper.m_PickableActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
            }
        }
    }
    public PickableActions @Pickable => new PickableActions(this);
    public interface IPickableActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
